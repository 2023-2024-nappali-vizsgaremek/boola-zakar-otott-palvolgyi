Index: ../../BoolaDesktop/Desktop/ViewModels/NewExpenseViewModel.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using CommunityToolkit.Mvvm.ComponentModel;\r\nusing CommunityToolkit.Mvvm.Input;\r\nusing Desktop.Models;\r\nusing Desktop.Service;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Collections.ObjectModel;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System.Windows.Documents;\r\n\r\nnamespace Desktop.ViewModels\r\n{\r\n    public partial class NewExpenseViewModel : AsyncInitializedViewModel\r\n    {\r\n        [ObservableProperty]\r\n        private NewExpnse expnse;\r\n        [ObservableProperty]\r\n        private ObservableCollection<Category> cat = new ObservableCollection<Category>(new category().categories);\r\n        [ObservableProperty]\r\n        private ObservableCollection<Money> cur = new ObservableCollection<Money>();\r\n        [ObservableProperty]\r\n        private string kategória;\r\n        [ObservableProperty]\r\n        private string pénznem;\r\n        [ObservableProperty]\r\n        private ObservableCollection<NewExpnse> lista = new ObservableCollection<NewExpnse>();\r\n        private Category _SelectCategory = Category.General;\r\n        private Money _Currency = new Money();\r\n        private ICurrencyService currencyService;\r\n        public NewExpenseViewModel(ICurrencyService currency)\r\n        {\r\n            currencyService = currency;\r\n            Expnse = new NewExpnse();\r\n            Expnse.category = cat.First();\r\n           \r\n        }\r\n        public override async Task InitializeAsync()\r\n        {\r\n            var c = await currencyService.GetAllCurrencys();\r\n            Cur = new ObservableCollection<Money>(c);\r\n            \r\n        }\r\n        public Category SelectCategory\r\n        {\r\n            get => _SelectCategory;\r\n            set\r\n            {\r\n                SetProperty(ref _SelectCategory, value);\r\n                Expnse.category = SelectCategory;\r\n\r\n            }\r\n        }\r\n        public Money Currency\r\n        {\r\n            get => _Currency;\r\n            set\r\n            {\r\n                SetProperty(ref _Currency, value);\r\n                Expnse.currency = Currency;\r\n\r\n            }\r\n        }\r\n       \r\n          \r\n\r\n        [RelayCommand]\r\n        public void Add(NewExpnse newExpnse)\r\n        {\r\n            Lista.Add(newExpnse);\r\n            OnPropertyChanged(nameof(Lista));\r\n        }\r\n        [RelayCommand]\r\n        public void ChangeToMainWindow()\r\n        {\r\n            MainWindowViewModel.Instance.ChangeToMainWindow();\r\n        }\r\n    }\r\n} \r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../BoolaDesktop/Desktop/ViewModels/NewExpenseViewModel.cs b/../../BoolaDesktop/Desktop/ViewModels/NewExpenseViewModel.cs
--- a/../../BoolaDesktop/Desktop/ViewModels/NewExpenseViewModel.cs	
+++ b/../../BoolaDesktop/Desktop/ViewModels/NewExpenseViewModel.cs	
@@ -8,6 +8,7 @@
 using System.Linq;
 using System.Text;
 using System.Threading.Tasks;
+using System.Windows;
 using System.Windows.Documents;
 
 namespace Desktop.ViewModels
@@ -40,6 +41,7 @@
         {
             var c = await currencyService.GetAllCurrencys();
             Cur = new ObservableCollection<Money>(c);
+           
             
         }
         public Category SelectCategory
@@ -70,11 +72,14 @@
         {
             Lista.Add(newExpnse);
             OnPropertyChanged(nameof(Lista));
+           
         }
         [RelayCommand]
         public void ChangeToMainWindow()
         {
             MainWindowViewModel.Instance.ChangeToMainWindow();
+           
         }
+       
     }
 } 
Index: src/main/kotlin/com/boola/controllers/DataController.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.boola.controllers\r\n\r\nimport com.boola.models.Account\r\nimport com.boola.models.Currency\r\nimport java.sql.Connection\r\nimport java.sql.PreparedStatement\r\n\r\nclass DataController(private val connection: Connection) {\r\n\r\n    private val getAccountStatement: PreparedStatement = connection.prepareStatement(\r\n        \"SELECT * FROM account WHERE email= ?\")\r\n    private val getAccountsStatement:PreparedStatement = connection.prepareStatement(\"SELECT * FROM account\")\r\n    private val getCurrencyStatement:PreparedStatement = connection.prepareStatement(\r\n        \"SELECT name from currency WHERE code = ?\")\r\n    private val getCurrenciesStatement:PreparedStatement = connection.prepareStatement(\"SELECT * FROM currency\")\r\n\r\n    fun getDbStatus():Boolean {\r\n        return connection.isValid(4)\r\n    }\r\n\r\n    fun getAccount(email: String): Account {\r\n        getAccountStatement.setString(1, email)\r\n        getAccountStatement.execute()\r\n        val results = getAccountStatement.resultSet\r\n        results.first()\r\n        return Account(results.getString(0), results.getString(1), results.getString(2)\r\n        )\r\n    }\r\n\r\n    fun getAccountsAll():ArrayList<Account>{\r\n        getAccountsStatement.execute()\r\n        val results = getAccountsStatement.resultSet\r\n        results.first()\r\n        val accounts = ArrayList<Account>()\r\n        do {\r\n            accounts.add(Account(results.getString(0), results.getString(1),\r\n                results.getString(2)))\r\n        } while (results.next())\r\n        return accounts\r\n    }\r\n\r\n    fun getCurrency(code:String):String {\r\n        getCurrencyStatement.setString(1,code)\r\n        getCurrencyStatement.execute()\r\n        val results = getCurrencyStatement.resultSet\r\n        results.first()\r\n        return results.getString(1)\r\n    }\r\n\r\n    fun getCurrenciesAll():ArrayList<Currency> {\r\n        getCurrenciesStatement.execute()\r\n        val currencies = ArrayList<Currency>()\r\n        val results = getCurrenciesStatement.resultSet\r\n        while (results.next()){\r\n            currencies.add(Currency(results.getString(\"code\"),results.getString(\"name\")))\r\n        }\r\n        return currencies\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/com/boola/controllers/DataController.kt b/src/main/kotlin/com/boola/controllers/DataController.kt
--- a/src/main/kotlin/com/boola/controllers/DataController.kt	
+++ b/src/main/kotlin/com/boola/controllers/DataController.kt	
@@ -2,8 +2,10 @@
 
 import com.boola.models.Account
 import com.boola.models.Currency
+import com.boola.models.Profile
 import java.sql.Connection
 import java.sql.PreparedStatement
+import java.util.UUID
 
 class DataController(private val connection: Connection) {
 
@@ -13,6 +15,8 @@
     private val getCurrencyStatement:PreparedStatement = connection.prepareStatement(
         "SELECT name from currency WHERE code = ?")
     private val getCurrenciesStatement:PreparedStatement = connection.prepareStatement("SELECT * FROM currency")
+    private val getProfileStatement:PreparedStatement=connection.prepareStatement( "SELECT * FROM profile WHERE id=?")
+
 
     fun getDbStatus():Boolean {
         return connection.isValid(4)
@@ -22,7 +26,7 @@
         getAccountStatement.setString(1, email)
         getAccountStatement.execute()
         val results = getAccountStatement.resultSet
-        results.first()
+
         return Account(results.getString(0), results.getString(1), results.getString(2)
         )
     }
@@ -30,7 +34,7 @@
     fun getAccountsAll():ArrayList<Account>{
         getAccountsStatement.execute()
         val results = getAccountsStatement.resultSet
-        results.first()
+
         val accounts = ArrayList<Account>()
         do {
             accounts.add(Account(results.getString(0), results.getString(1),
@@ -43,7 +47,7 @@
         getCurrencyStatement.setString(1,code)
         getCurrencyStatement.execute()
         val results = getCurrencyStatement.resultSet
-        results.first()
+
         return results.getString(1)
     }
 
@@ -56,5 +60,12 @@
         }
         return currencies
     }
+    fun getProfile(id:UUID):Profile{
+getProfileStatement.setObject(1,id);
+        getProfileStatement.execute()
+        val results= getProfileStatement.resultSet
+
+        return Profile(UUID.fromString(results.getString(0)),results.getString(1),results.getBoolean(2),results.getString(3),UUID.fromString(results.getString(4)),results.getString(5))
+    }
 
 }
\ No newline at end of file
Index: ../../BoolaDesktop/Desktop/App.xaml.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\nusing System.Collections.Generic;\r\nusing System.Configuration;\r\nusing System.Data;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing System.Windows;\r\nusing Microsoft.Extensions.Http;\r\nusing Microsoft.Extensions.Hosting;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Desktop.Extensions;\r\n\r\nnamespace Desktop\r\n{\r\n    /// <summary>\r\n    /// Interaction logic for App.xaml\r\n    /// </summary>\r\n    public partial class App : Application\r\n    {\r\n        private bool _login = false;\r\n        private IHost host;\r\n        public App()\r\n        {\r\n            host=Host.CreateDefaultBuilder()\r\n                .ConfigureServices(srevices =>\r\n                {\r\n                    srevices.ConfigureHttpClient();\r\n                    srevices.ConfigureApiServices();\r\n                })\r\n                .Build();\r\n        }\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../BoolaDesktop/Desktop/App.xaml.cs b/../../BoolaDesktop/Desktop/App.xaml.cs
--- a/../../BoolaDesktop/Desktop/App.xaml.cs	
+++ b/../../BoolaDesktop/Desktop/App.xaml.cs	
@@ -9,6 +9,8 @@
 using Microsoft.Extensions.Hosting;
 using Microsoft.Extensions.DependencyInjection;
 using Desktop.Extensions;
+using Desktop.ViewModels;
+using Desktop.Views;
 
 namespace Desktop
 {
@@ -26,9 +28,16 @@
                 {
                     srevices.ConfigureHttpClient();
                     srevices.ConfigureApiServices();
+                    srevices.AddSingleton<NewExpenseView>(b => new NewExpenseView()
+                    {
+                        DataContext = b.GetRequiredService<NewExpenseViewModel>()
+                    }) ;
+
                 })
                 .Build();
+
         }
 
     }
+
 }
